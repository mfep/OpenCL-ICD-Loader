name: Presubmit

on: [push, pull_request]

jobs:
  get-branch:
    runs-on: ubuntu-latest
    steps:
      - name: Get working branch
        id: get-branch
        run: |
          if [[ ${{ github.event_name }} == "push" ]]; then
            echo "branch=main" >> $GITHUB_OUTPUT
          else
            echo "branch=${{ github.base_ref }}" >> $GITHUB_OUTPUT
          fi ;
          echo $GITHUB_OUTPUT
    outputs:
      branch: ${{ steps.get-branch.outputs.branch }}

  format:
    name: Code formatting
    runs-on: ubuntu-latest
    needs: get-branch
    steps:
      - uses: actions/checkout@v3
        with:
          # repository: ${{ github.repository }} (default)
          fetch-depth: 0
      - name: Install clang-format
        run: sudo apt-get install clang-format
      - name: Check format
        run: $GITHUB_WORKSPACE/scripts/check-format.sh origin/${{ needs.get-branch.outputs.branch }} --binary clang-format

  linux:
    runs-on: ubuntu-latest
    needs: format
    strategy:
      matrix:
        CMAKE: [3.26.4]
        C_COMPILER:
          - gcc-11
          - gcc-13
          - clang-14
          - clang-16
        BIN: [64]
        CONF:
          - GEN: Unix Makefiles
            CONFIG: Debug
          - GEN: Unix Makefiles
            CONFIG: Release
          - GEN: Ninja Multi-Config
            CONFIG: Release
        IMAGE:
          - streamhpc/opencl-sdk-base:ubuntu-22.04-20230717
        include:
          - CMAKE: system
            C_COMPILER: gcc-9
            BIN: 64
            CONF:
              GEN: Unix Makefiles
              CONFIG: Debug
            IMAGE: streamhpc/opencl-sdk-base:ubuntu-20.04-20230717
          - CMAKE: system
            C_COMPILER: gcc-9
            BIN: 64
            CONF:
              GEN: Unix Makefiles
              CONFIG: Release
            IMAGE: streamhpc/opencl-sdk-base:ubuntu-20.04-20230717
          - CMAKE: system
            C_COMPILER: gcc-9
            BIN: 32
            CONF:
              GEN: Unix Makefiles
              CONFIG: Debug
            IMAGE: streamhpc/opencl-sdk-base:ubuntu-20.04-20230717
          - CMAKE: system
            C_COMPILER: gcc-9
            BIN: 32
            CONF:
              GEN: Unix Makefiles
              CONFIG: Release
            IMAGE: streamhpc/opencl-sdk-base:ubuntu-20.04-20230717
    container: ${{matrix.IMAGE}}
    env:
      CMAKE_EXE: /opt/Kitware/CMake/${{ matrix.CMAKE }}/bin/cmake
      CPACK_EXE: /opt/Kitware/CMake/${{ matrix.CMAKE }}/bin/cpack
      CTEST_EXE: /opt/Kitware/CMake/${{ matrix.CMAKE }}/bin/ctest
      CC: ${{matrix.C_COMPILER}}
      CFLAGS: -Wall -Wextra -Werror -pedantic -m${{matrix.BIN}}
      DEB_INSTALLATION_PATH: /usr
      INSTALL_LIBDIR: lib

    steps:
    - name: Install system CMake
      shell: bash
      if: ${{matrix.CMAKE}} == 'system'
      run: apt-get update -qq && apt-get install -y cmake &&
        echo "CMAKE_EXE=cmake" >> "$GITHUB_ENV" &&
        echo "CPACK_EXE=cpack" >> "$GITHUB_ENV" &&
        echo "CTEST_EXE=ctest" >> "$GITHUB_ENV"

    - name: Checkout OpenCL-ICD-Loader
      uses: actions/checkout@v3

    - name: Checkout OpenCL-Headers
      uses: actions/checkout@v3
      with:
        path: external/OpenCL-Headers
        # ToDo: Change to KhronosGroup/OpenCL-Headers:main
        repository: StreamHPC/OpenCL-Headers
        ref: release-cd

    - name: Configure, install & package OpenCL-Headers
      shell: bash
      run: $CMAKE_EXE
        -G "${{matrix.CONF.GEN}}"
        `if [[ "${{matrix.CONF.GEN}}" == "Unix Makefiles" ]]; then echo "-D CMAKE_BUILD_TYPE=${{matrix.CONF.CONFIG}}"; fi`
        -D CMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/external/OpenCL-Headers/install
        -D CPACK_PACKAGING_INSTALL_PREFIX=$DEB_INSTALLATION_PATH
        -D BUILD_TESTING=OFF
        -S $GITHUB_WORKSPACE/external/OpenCL-Headers
        -B $GITHUB_WORKSPACE/external/OpenCL-Headers/build &&
        $CMAKE_EXE
        --build $GITHUB_WORKSPACE/external/OpenCL-Headers/build
        --target install
        --parallel `nproc` &&
        $CPACK_EXE
        --config "$GITHUB_WORKSPACE/external/OpenCL-Headers/build/CPackConfig.cmake"
        -G DEB
        -C ${{matrix.CONF.CONFIG}}
        -B "$GITHUB_WORKSPACE/external/OpenCL-Headers/package-deb"

    - name: Configure
      shell: bash
      run: $CMAKE_EXE
        -G "${{matrix.CONF.GEN}}"
        `if [[ "${{matrix.CONF.GEN}}" == "Unix Makefiles" ]]; then echo "-D CMAKE_BUILD_TYPE=${{matrix.CONF.CONFIG}}"; fi`
        -D BUILD_TESTING=ON
        -D CMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/install
        -D CMAKE_PREFIX_PATH=$GITHUB_WORKSPACE/external/OpenCL-Headers/install
        -D CPACK_PACKAGING_INSTALL_PREFIX=$DEB_INSTALLATION_PATH
        -S $GITHUB_WORKSPACE
        -B $GITHUB_WORKSPACE/build

    - name: Build
      shell: bash
      run: if [[ "${{matrix.CONF.GEN}}" == "Unix Makefiles" ]];
        then
          $CMAKE_EXE --build $GITHUB_WORKSPACE/build --config ${{matrix.CONF.CONFIG}} --parallel `nproc`;
        else
          $CMAKE_EXE --build $GITHUB_WORKSPACE/build --config Debug;
          $CMAKE_EXE --build $GITHUB_WORKSPACE/build --config Release;
        fi

    - name: Test
      shell: bash
      working-directory: ${{runner.workspace}}/OpenCL-ICD-Loader/build
      run: if [[ "${{matrix.CONF.GEN}}" == "Unix Makefiles" ]];
        then
          $CTEST_EXE --output-on-failure --parallel `nproc`;
        else
          $CTEST_EXE --output-on-failure -C Debug   --parallel `nproc`;
          $CTEST_EXE --output-on-failure -C Release --parallel `nproc`;
        fi

    - name: Package DEB
      shell: bash
      run: $CPACK_EXE
        --config "$GITHUB_WORKSPACE/build/CPackConfig.cmake"
        -G DEB
        -C ${{matrix.CONF.CONFIG}}
        -B "$GITHUB_WORKSPACE/package-deb"

    - name: Consume (DEB)
      shell: bash
      run: dpkg -i $GITHUB_WORKSPACE/external/OpenCL-Headers/package-deb/*.deb &&
        dpkg -i $GITHUB_WORKSPACE/package-deb/*.deb &&
        $CMAKE_EXE
        -G "${{matrix.CONF.GEN}}"
        `if [[ "${{matrix.CONF.GEN}}" == "Unix Makefiles" ]]; then echo "-D CMAKE_BUILD_TYPE=${{matrix.CONF.CONFIG}}"; fi`
        -S $GITHUB_WORKSPACE/test/pkgconfig/bare
        -B $GITHUB_WORKSPACE/build_package &&
        if [[ "${{matrix.CONF.GEN}}" == "Unix Makefiles" ]];
        then
          $CMAKE_EXE --build $GITHUB_WORKSPACE/build_package --config ${{matrix.CONF.CONFIG}} --parallel `nproc`;
        else
          $CMAKE_EXE --build $GITHUB_WORKSPACE/build_package --config Debug;
          $CMAKE_EXE --build $GITHUB_WORKSPACE/build_package --config Release;
        fi

    - name: Test pkg-config (DEB)
      shell: bash
      # We expect no pre-processor and compile flags (--cflags) but we do expect link flags (--libs)
      run: if [[ $(pkg-config OpenCL --cflags) ]];
        then
          exit 1;
        fi &&
        pkg-config OpenCL --libs | grep -q "\-lOpenCL"

    - name: Test cllayerinfo (DEB)
      shell: bash
      run: cllayerinfo

    - name: Uninstall (DEB)
      shell: bash
      run: apt-get remove -y "khronos-opencl-loader*"

    - name: Test install
      shell: bash
      run: $CMAKE_EXE --build $GITHUB_WORKSPACE/build --target install --config ${{matrix.CONF.CONFIG}} --parallel `nproc`

    - name: Consume (install)
      shell: bash
      run: $CMAKE_EXE
        -G "${{matrix.CONF.GEN}}"
        `if [[ "${{matrix.CONF.GEN}}" == "Unix Makefiles" ]]; then echo "-D CMAKE_BUILD_TYPE=${{matrix.CONF.CONFIG}}"; fi`
        -D CMAKE_PREFIX_PATH=$GITHUB_WORKSPACE/install
        -S $GITHUB_WORKSPACE/test/pkgconfig/bare
        -B $GITHUB_WORKSPACE/build_install &&
        if [[ "${{matrix.CONF.GEN}}" == "Unix Makefiles" ]];
        then
          $CMAKE_EXE --build $GITHUB_WORKSPACE/build_install --parallel `nproc`;
        else
          $CMAKE_EXE --build $GITHUB_WORKSPACE/build_install --config Debug;
          $CMAKE_EXE --build $GITHUB_WORKSPACE/build_install --config Release;
        fi

    - name: Test pkg-config (install)
      shell: bash
      # We expect no pre-processor and compile flags (--cflags) but we do expect link flags (--libs)
      run: export PKG_CONFIG_PATH=$GITHUB_WORKSPACE/install/$INSTALL_LIBDIR/pkgconfig &&
        if [[ $(pkg-config OpenCL --cflags) ]];
        then
          exit 1;
        fi &&
        pkg-config OpenCL --libs | grep -q "\-L$GITHUB_WORKSPACE/install/$INSTALL_LIBDIR \-lOpenCL"

  windows:
    runs-on: windows-latest
    needs: format
    strategy:
      matrix:
        VER: [v141, v142, v143, clangcl]
        GEN: [Visual Studio 17 2022, Ninja Multi-Config]
        BIN: [x64]
        exclude:
        - VER: clangcl
          GEN: Ninja Multi-Config
        include:
          - VER: v142
            GEN: Visual Studio 17 2022
            BIN: x86
    env:
      NINJA_URL: https://github.com/ninja-build/ninja/releases/download/v1.10.2/ninja-win.zip
      NINJA_ROOT: C:\Tools\Ninja
      VS_ROOT: 'C:\Program Files\Microsoft Visual Studio\2022\Enterprise'
      UseMultiToolTask: true # Better parallel MSBuild execution
      EnforceProcessCountAcrossBuilds: 'true'
      MultiProcMaxCount: '3'

    steps:
    - name: Cache Ninja install
      if: matrix.GEN == 'Ninja Multi-Config'
      id: ninja-install
      uses: actions/cache@v3
      with:
        path: |
          C:\Tools\Ninja
        key: ${{runner.os}}-ninja-${{env.NINJA_URL}}

    - name: Install Ninja
      if: matrix.GEN == 'Ninja Multi-Config' && steps.ninja-install.outputs.cache-hit != 'true'
      shell: pwsh
      run: |
        Invoke-WebRequest ${env:NINJA_URL} -OutFile ~\Downloads\ninja-win.zip
        Expand-Archive ~\Downloads\ninja-win.zip -DestinationPath ${env:NINJA_ROOT}\
        Remove-Item ~\Downloads\*

    - name: Checkout OpenCL-ICD-Loader
      uses: actions/checkout@v3

    - name: Checkout OpenCL-Headers
      uses: actions/checkout@v3
      with:
        repository: KhronosGroup/OpenCL-Headers
        path: external/OpenCL-Headers

    - name: Build & install OpenCL-Headers (MSBuild)
      if: matrix.GEN == 'Visual Studio 17 2022'
      shell: pwsh
      run: |
        $BIN = if('${{matrix.BIN}}' -eq 'x86') {'Win32'} else {'x64'}
        & cmake `
          -G "${{matrix.GEN}}" `
          -A $BIN `
          -T ${{matrix.VER}} `
          -D BUILD_TESTING=OFF `
          -D CMAKE_C_EXTENSIONS=OFF `
          -D CMAKE_INSTALL_PREFIX=${env:GITHUB_WORKSPACE}\external\OpenCL-Headers\install `
          -S ${env:GITHUB_WORKSPACE}\external\OpenCL-Headers `
          -B ${env:GITHUB_WORKSPACE}\external\OpenCL-Headers\build
        & cmake `
          --build "${env:GITHUB_WORKSPACE}\external\OpenCL-Headers\build" `
          --target install `
          -- `
          /verbosity:minimal `
          /maxCpuCount `
          /noLogo `

    - name: Build & install OpenCL-Headers (Ninja Multi-Config)
      if: matrix.GEN == 'Ninja Multi-Config'
      shell: pwsh
      run: |
        $VER = switch ('${{matrix.VER}}') { `
          'v141' {'14.1'} `
          'v142' {'14.2'} `
          'v143' {'14.3'} }
        Import-Module "${env:VS_ROOT}\Common7\Tools\Microsoft.VisualStudio.DevShell.dll"
        Enter-VsDevShell -VsInstallPath ${env:VS_ROOT} -SkipAutomaticLocation -DevCmdArguments "-host_arch=x64 -arch=${{matrix.BIN}} -vcvars_ver=$VER"
        & cmake `
          -G "${{matrix.GEN}}" `
          -D CMAKE_MAKE_PROGRAM="${env:NINJA_ROOT}\ninja.exe"  `
          -D BUILD_TESTING=OFF `
          -D CMAKE_C_EXTENSIONS=OFF `
          -D CMAKE_INSTALL_PREFIX=${env:GITHUB_WORKSPACE}\external\OpenCL-Headers\install `
          -S ${env:GITHUB_WORKSPACE}\external\OpenCL-Headers `
          -B ${env:GITHUB_WORKSPACE}\external\OpenCL-Headers\build
        & cmake `
          --build "${env:GITHUB_WORKSPACE}\external\OpenCL-Headers\build" `
          --target install `
          -- `
          -j ${env:NUMBER_OF_PROCESSORS}

    - name: Configure (MSBuild)
      if: matrix.GEN == 'Visual Studio 17 2022'
      shell: pwsh
      # no /WX during configuration because:
      # error C2220: warning treated as error - no 'object' file generated
      run: |
        $BIN = if('${{matrix.BIN}}' -eq 'x86') {'Win32'} else {'x64'}
        & cmake `
          -G "${{matrix.GEN}}" `
          -A $BIN `
          -T ${{matrix.VER}} `
          -D BUILD_TESTING=ON `
          -D CMAKE_C_EXTENSIONS=OFF `
          -D CMAKE_INSTALL_PREFIX=${env:GITHUB_WORKSPACE}\install `
          -D CMAKE_PREFIX_PATH=${env:GITHUB_WORKSPACE}\external\OpenCL-Headers\install `
          -S ${env:GITHUB_WORKSPACE} `
          -B ${env:GITHUB_WORKSPACE}\build

    - name: Configure (Ninja Multi-Config)
      if: matrix.GEN == 'Ninja Multi-Config'
      shell: pwsh
      # no /WX during configuration because:
      # error C2220: warning treated as error - no 'object' file generated
      run: |
        $VER = switch ('${{matrix.VER}}') { `
          'v141' {'14.1'} `
          'v142' {'14.2'} `
          'v143' {'14.3'} }
        Import-Module "${env:VS_ROOT}\Common7\Tools\Microsoft.VisualStudio.DevShell.dll"
        Enter-VsDevShell -VsInstallPath ${env:VS_ROOT} -SkipAutomaticLocation -DevCmdArguments "-host_arch=x64 -arch=${{matrix.BIN}} -vcvars_ver=$VER"
        & cmake `
          -G "${{matrix.GEN}}" `
          -D CMAKE_MAKE_PROGRAM="${env:NINJA_ROOT}\ninja.exe" `
          -D BUILD_TESTING=ON `
          -D CMAKE_C_EXTENSIONS=OFF `
          -D CMAKE_EXE_LINKER_FLAGS=/INCREMENTAL `
          -D CMAKE_INSTALL_PREFIX=${env:GITHUB_WORKSPACE}\install `
          -D CMAKE_PREFIX_PATH=${env:GITHUB_WORKSPACE}\external\OpenCL-Headers\install `
          -S ${env:GITHUB_WORKSPACE} `
          -B ${env:GITHUB_WORKSPACE}\build

    - name: Build (MSBuild)
      if: matrix.GEN == 'Visual Studio 17 2022'
      shell: pwsh
      run: |
        foreach ($Config in 'Release','Debug') { `
          & cmake `
            --build "${env:GITHUB_WORKSPACE}\build" `
            --config $Config `
            -- `
            /verbosity:minimal `
            /maxCpuCount `
            /noLogo
        }

    - name: Build (Ninja Multi-Config)
      if: matrix.GEN == 'Ninja Multi-Config'
      shell: pwsh
      run: |
        $VER = switch ('${{matrix.VER}}') { `
          'v141' {'14.1'} `
          'v142' {'14.2'} `
          'v143' {'14.3'} }
        Import-Module "${env:VS_ROOT}\Common7\Tools\Microsoft.VisualStudio.DevShell.dll"
        Enter-VsDevShell -VsInstallPath ${env:VS_ROOT} -SkipAutomaticLocation -DevCmdArguments "-host_arch=x64 -arch=${{matrix.BIN}} -vcvars_ver=$VER"
        foreach ($Config in 'Release','Debug') { `
          & cmake `
            --build "${env:GITHUB_WORKSPACE}\build" `
            --config $Config `
            -- `
            -j ${env:NUMBER_OF_PROCESSORS}
        }

    - name: Test
      working-directory: ${{runner.workspace}}/OpenCL-ICD-Loader/build
      shell: pwsh
      run: |
        $REG = if('${{matrix.BIN}}' -eq 'x64') {"reg"} else {"${env:SystemRoot}\Syswow64\reg.exe"}
        $KEY_NAME = "HKEY_LOCAL_MACHINE\SOFTWARE\Khronos\OpenCL\Vendors"
        foreach ($Config in 'Release','Debug') {
          $VALUE_NAME = "${env:GITHUB_WORKSPACE}/build/$Config/OpenCLDriverStub.dll"
          & $REG ADD $KEY_NAME /v $VALUE_NAME /t REG_DWORD /d 0
          ctest -C $Config --output-on-failure --parallel ${env:NUMBER_OF_PROCESSORS}
          & $REG DELETE $KEY_NAME /v $VALUE_NAME /f
        }

    - name: Install
      shell: pwsh
      run: |
        & cmake `
          --build "${env:GITHUB_WORKSPACE}\build" `
          --config Release `
          --target install

    - name: "Consume (MSBuild standalone): Configure/Build/Test"
      if: matrix.GEN == 'Visual Studio 17 2022'
      shell: pwsh
      run: |
        & cmake `
          -G '${{matrix.GEN}}' `
          -T ${{matrix.VER}} `
          -D CMAKE_C_EXTENSIONS=OFF `
          -D CMAKE_EXE_LINKER_FLAGS=/INCREMENTAL `
          -D CMAKE_PREFIX_PATH="${env:GITHUB_WORKSPACE}\install" `
          -D DRIVER_STUB_PATH="${env:GITHUB_WORKSPACE}\build\Release\OpenCLDriverStub.dll" `
          -S "${env:GITHUB_WORKSPACE}\tests\pkgconfig\bare" `
          -B "${env:GITHUB_WORKSPACE}\downstream\pkgconfig\bare"
        foreach ($Config in 'Release','Debug') { `
          & cmake `
            --build "${env:GITHUB_WORKSPACE}\downstream\pkgconfig\bare" `
            --config $Config `
          & cd ${env:GITHUB_WORKSPACE}\downstream\pkgconfig\bare `
          & ctest `
            --output-on-failure -C $Config
        }

    - name: "Consume (Ninja-Multi-Config standalone): Configure/Build/Test"
      if: matrix.GEN == 'Ninja Multi-Config'
      shell: pwsh
      run: |
        $VER = switch ('${{matrix.VER}}') { `
          'v141' {'14.1'} `
          'v142' {'14.2'} `
          'v143' {'14.3'} }
        Import-Module "${env:VS_ROOT}\Common7\Tools\Microsoft.VisualStudio.DevShell.dll"
        Enter-VsDevShell -VsInstallPath ${env:VS_ROOT} -SkipAutomaticLocation -DevCmdArguments "-host_arch=x64 -arch=${{matrix.BIN}} -vcvars_ver=$VER"
        & cmake `
          -G '${{matrix.GEN}}' `
          -D CMAKE_MAKE_PROGRAM="${env:NINJA_ROOT}\ninja.exe" `
          -D CMAKE_C_EXTENSIONS=OFF `
          -D CMAKE_EXE_LINKER_FLAGS=/INCREMENTAL `
          -D CMAKE_PREFIX_PATH="${env:GITHUB_WORKSPACE}\external\OpenCL-Headers\install;${env:GITHUB_WORKSPACE}\install" `
          -D DRIVER_STUB_PATH="${env:GITHUB_WORKSPACE}\build\Release\OpenCLDriverStub.dll" `
          -S "${env:GITHUB_WORKSPACE}\tests\pkgconfig\bare" `
          -B "${env:GITHUB_WORKSPACE}\downstream\pkgconfig\bare"
        foreach ($Config in 'Release','Debug') { `
          & cmake `
            --build "${env:GITHUB_WORKSPACE}\downstream\pkgconfig\bare" `
            --config $Config `
          & cd ${env:GITHUB_WORKSPACE}\downstream\pkgconfig\bare `
          & ctest `
            --output-on-failure -C $Config
        }

    - name: Consume (Emulate SDK presence)
      shell: pwsh
      run: |
        New-Item -Type Directory -Path ${env:GITHUB_WORKSPACE}\install\share\cmake\OpenCL
        New-Item -Type File -Path ${env:GITHUB_WORKSPACE}\install\share\cmake\OpenCL\OpenCLConfig.cmake -Value 'include("${env:GITHUB_WORKSPACE}\external\OpenCL-Headers\install\share\cmake\OpenCLHeaders\OpenCLHeadersTargets.cmake")\ninclude("${CMAKE_CURRENT_LIST_DIR}\..\OpenCLICDLoader\OpenCLICDLoaderTargets.cmake")'

    - name: "Consume (MSBuild SDK): Configure/Build/Test"
      if: matrix.GEN == 'Visual Studio 17 2022'
      shell: pwsh
      run: |
        & cmake `
          -G '${{matrix.GEN}}' `
          -D CMAKE_C_EXTENSIONS=OFF `
          -D CMAKE_EXE_LINKER_FLAGS=/INCREMENTAL `
          -D CMAKE_PREFIX_PATH="${env:GITHUB_WORKSPACE}\external\OpenCL-Headers\install;${env:GITHUB_WORKSPACE}\install" `
          -D DRIVER_STUB_PATH="${env:GITHUB_WORKSPACE}\build\Release\OpenCLDriverStub.dll" `
          -S "${env:GITHUB_WORKSPACE}\tests\pkgconfig\sdk" `
          -B "${env:GITHUB_WORKSPACE}\downstream\pkgconfig\sdk"
        foreach ($Config in 'Release','Debug') { `
          & cmake `
            --build "${env:GITHUB_WORKSPACE}\downstream\pkgconfig\sdk" `
            --config $Config `
          & cd ${env:GITHUB_WORKSPACE}\downstream\pkgconfig\sdk `
          & ctest `
            --output-on-failure -C $Config
        }

    - name: "Consume (Ninja-Multi-Config SDK): Configure/Build/Test"
      if: matrix.GEN == 'Ninja Multi-Config'
      shell: pwsh
      run: |
        $VER = switch ('${{matrix.VER}}') { `
          'v141' {'14.1'} `
          'v142' {'14.2'} `
          'v143' {'14.3'} }
        & cmake `
          -G '${{matrix.GEN}}' `
          -D CMAKE_MAKE_PROGRAM="${env:NINJA_ROOT}\ninja.exe" `
          -D CMAKE_C_EXTENSIONS=OFF `
          -D CMAKE_EXE_LINKER_FLAGS=/INCREMENTAL `
          -D CMAKE_PREFIX_PATH="${env:GITHUB_WORKSPACE}\external\OpenCL-Headers\install;${env:GITHUB_WORKSPACE}\install" `
          -D DRIVER_STUB_PATH="${env:GITHUB_WORKSPACE}\build\Release\OpenCLDriverStub.dll" `
          -S "${env:GITHUB_WORKSPACE}\tests\pkgconfig\sdk" `
          -B "${env:GITHUB_WORKSPACE}\downstream\pkgconfig\sdk"
        foreach ($Config in 'Release','Debug') { `
          & cmake `
            --build "${env:GITHUB_WORKSPACE}\downstream\pkgconfig\sdk" `
            --config $Config `
          & cd ${env:GITHUB_WORKSPACE}\downstream\pkgconfig\sdk `
          & ctest `
            --output-on-failure -C $Config
        }

  macos:
    runs-on: macos-latest
    needs: format
    strategy:
      matrix:
        C_COMPILER:
        - /usr/bin/gcc # Actually Clang 14
        - /usr/local/bin/gcc-11
        - /usr/local/bin/gcc-13
        GEN:
        - Xcode
        - Ninja Multi-Config
        STD: [99, 11, 17]
        exclude:
        - C_COMPILER: /usr/bin/gcc
          GEN: Ninja Multi-Config
        - C_COMPILER: /usr/local/bin/gcc-11
          GEN: Xcode
        - C_COMPILER: /usr/local/bin/gcc-13
          GEN: Xcode
    env:
      INSTALL_LIBDIR: lib
      CFLAGS: -Wall -Wextra -pedantic -Werror

    steps:
    - name: Checkout OpenCL-ICD-Loader
      uses: actions/checkout@v3

    - name: Checkout OpenCL-Headers
      uses: actions/checkout@v3
      with:
        repository: KhronosGroup/OpenCL-Headers
        path: external/OpenCL-Headers

    - name: Create Build Environment
      shell: bash
      run: |
        cmake -E make_directory $GITHUB_WORKSPACE/build &&
        cmake -E make_directory $GITHUB_WORKSPACE/install &&
        if [[ "${{matrix.GEN}}" == "Ninja Multi-Config" && ! `which ninja` ]]; then brew install ninja; fi &&
        # Install Ninja only if it's the selected generator and it's not available.
        cmake --version

    - name: Build & install OpenCL-Headers
      shell: bash
      run: cmake
        -G "${{matrix.GEN}}"
        -D BUILD_TESTING=OFF
        -D CMAKE_C_COMPILER=${{matrix.C_COMPILER}}
        -D CMAKE_C_EXTENSIONS=OFF
        -D CMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/external/OpenCL-Headers/install
        -S $GITHUB_WORKSPACE/external/OpenCL-Headers
        -B $GITHUB_WORKSPACE/external/OpenCL-Headers/build &&
        cmake
        --build $GITHUB_WORKSPACE/external/OpenCL-Headers/build
        --target install
        --config Release
        --parallel `sysctl -n hw.logicalcpu`

    - name: Configure
      shell: bash
      run: cmake
        -G "${{matrix.GEN}}"
        -D BUILD_TESTING=ON
        -D CMAKE_C_COMPILER=${{matrix.C_COMPILER}}
        -D CMAKE_C_EXTENSIONS=OFF
        -D CMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/install
        -D CMAKE_PREFIX_PATH=$GITHUB_WORKSPACE/external/OpenCL-Headers/install
        -S $GITHUB_WORKSPACE
        -B $GITHUB_WORKSPACE/build

    - name: Build
      shell: bash
      run: |
        cmake --build $GITHUB_WORKSPACE/build --config Release --parallel `sysctl -n hw.logicalcpu`
        cmake --build $GITHUB_WORKSPACE/build --config Debug --parallel `sysctl -n hw.logicalcpu`

    - name: Test
      working-directory: ${{runner.workspace}}/OpenCL-ICD-Loader/build
      shell: bash
      run: |
        ctest -C Release --output-on-failure --parallel `sysctl -n hw.logicalcpu`
        ctest -C Debug --output-on-failure --parallel `sysctl -n hw.logicalcpu`

    - name: Test install
      shell: bash
      run: |
        cmake --build $GITHUB_WORKSPACE/build --config Release --target install

    - name: Consume (install)
      shell: bash
      run: cmake
        -G "${{matrix.GEN}}"
        -D CMAKE_C_COMPILER=${{matrix.C_COMPILER}}
        -D CMAKE_C_EXTENSIONS=OFF
        -D CMAKE_PREFIX_PATH="$GITHUB_WORKSPACE/external/OpenCL-Headers/install;$GITHUB_WORKSPACE/install"
        -S $GITHUB_WORKSPACE/test/pkgconfig/bare
        -B $GITHUB_WORKSPACE/build_install &&
        cmake --build $GITHUB_WORKSPACE/build_install --config Release --parallel `sysctl -n hw.logicalcpu` `if [[ "${{matrix.GEN}}" == "Xcode" ]]; then echo "-- -quiet"; fi;` &&
        cmake --build $GITHUB_WORKSPACE/build_install --config Debug --parallel `sysctl -n hw.logicalcpu` `if [[ "${{matrix.GEN}}" == "Xcode" ]]; then echo "-- -quiet"; fi;`

    - name: Test pkg-config
      shell: bash
      run: |
        if [[ ! `which pkg-config` ]]; then brew install pkg-config; fi;
        export PKG_CONFIG_PATH=$GITHUB_WORKSPACE/install/$INSTALL_LIBDIR/pkgconfig:$GITHUB_WORKSPACE/external/OpenCL-Headers/install/share/pkgconfig &&
        pkg-config OpenCL --cflags | grep -q "\-I$GITHUB_WORKSPACE/external/OpenCL-Headers/install/include" &&
        pkg-config OpenCL --libs | grep -q "\-L$GITHUB_WORKSPACE/install/lib -lOpenCL"

    - name: Consume pkg-config
      shell: bash
      run: export PKG_CONFIG_PATH=$GITHUB_WORKSPACE/install/$INSTALL_LIBDIR/pkgconfig:$GITHUB_WORKSPACE/external/OpenCL-Headers/install/share/pkgconfig &&
        cmake
        -G "${{matrix.GEN}}"
        -D CMAKE_C_COMPILER=${{matrix.C_COMPILER}}
        -D CMAKE_C_EXTENSIONS=OFF
        -D CMAKE_PREFIX_PATH="$GITHUB_WORKSPACE/external/OpenCL-Headers/install"
        -D DRIVER_STUB_PATH=$GITHUB_WORKSPACE/build/Release/libOpenCLDriverStub.dylib
        -B $GITHUB_WORKSPACE/build/downstream/pkgconfig
        -S $GITHUB_WORKSPACE/test/pkgconfig/pkgconfig &&
        cmake --build $GITHUB_WORKSPACE/build/downstream/pkgconfig --config Release --parallel `sysctl -n hw.logicalcpu` `if [[ "${{matrix.GEN}}" == "Xcode" ]]; then echo "-- -quiet"; fi;` &&
        cmake --build $GITHUB_WORKSPACE/build/downstream/pkgconfig --config Debug --parallel `sysctl -n hw.logicalcpu` `if [[ "${{matrix.GEN}}" == "Xcode" ]]; then echo "-- -quiet"; fi;` &&
        cd $GITHUB_WORKSPACE/build/downstream/pkgconfig &&
        ctest -C Release --output-on-failure --parallel `sysctl -n hw.logicalcpu` &&
        ctest -C Debug --output-on-failure --parallel `sysctl -n hw.logicalcpu`

  android:
    runs-on: ubuntu-latest
    needs: format
    strategy:
      matrix:
        ABI:
        - arm64-v8a
        - x86_64
        API_LEVEL:
        - android-19
        - android-33
        CONFIG:
        - Debug
        - Release
    env:
      CFLAGS: -Wall -Wextra -pedantic -Werror
    steps:
    - name: Checkout OpenCL-ICD-Loader
      uses: actions/checkout@v3

    - name: Checkout OpenCL-Headers
      uses: actions/checkout@v3
      with:
        repository: KhronosGroup/OpenCL-Headers
        path: external/OpenCL-Headers

    - name: Configure & install OpenCL-Headers
      shell: bash
      run: cmake
        -G "Unix Makefiles"
        -D CMAKE_BUILD_TYPE=${{matrix.CONFIG}}
        -D CMAKE_C_EXTENSIONS=OFF
        -D CMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/external/OpenCL-Headers/install
        -D BUILD_TESTING=OFF
        -S $GITHUB_WORKSPACE/external/OpenCL-Headers
        -B $GITHUB_WORKSPACE/external/OpenCL-Headers/build &&
        cmake
        --build $GITHUB_WORKSPACE/external/OpenCL-Headers/build
        --target install
        --
        -j`nproc`

    - name: Configure
      shell: bash
      run: cmake
        -G "Unix Makefiles"
        -D BUILD_TESTING=ON
        -D CMAKE_BUILD_TYPE=${{matrix.CONFIG}}
        -D CMAKE_TOOLCHAIN_FILE=$ANDROID_NDK/build/cmake/android.toolchain.cmake
        -D ANDROID_ABI=${{matrix.ABI}}
        -D ANDROID_PLATFORM=${{matrix.API_LEVEL}}
        -D CMAKE_FIND_ROOT_PATH_MODE_PACKAGE=ONLY
        -D CMAKE_FIND_ROOT_PATH=$GITHUB_WORKSPACE/external/OpenCL-Headers/install
        -S $GITHUB_WORKSPACE
        -B $GITHUB_WORKSPACE/build

    - name: Build
      shell: bash
      run: cmake --build $GITHUB_WORKSPACE/build --parallel `nproc`
